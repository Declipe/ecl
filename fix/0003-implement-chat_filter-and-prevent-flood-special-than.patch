From b95e47f0552948e27a9880fae8b820f49284f2d9 Mon Sep 17 00:00:00 2001
From: krishna laptop kantor <krenz_37@yahoo.com>
Date: Mon, 17 Sep 2012 17:35:34 +0700
Subject: [PATCH] implement chat_filter and prevent flood special thanks to
 discover

---
 sql/custom/world/chat_filter.sql                   |  71 +++++++
 src/server/game/Entities/Player/Player.cpp         |  23 +++
 src/server/game/Entities/Player/Player.h           |  13 ++
 src/server/game/Globals/ObjectMgr.cpp              |  26 +++
 src/server/game/Globals/ObjectMgr.h                |   7 +
 src/server/game/Handlers/ChatHandler.cpp           | 218 ++++++++++++++++++++-
 src/server/game/Scripting/ScriptLoader.cpp         |   4 +
 src/server/game/World/World.cpp                    |   5 +-
 src/server/scripts/Commands/cs_reload.cpp          |  14 ++
 src/server/scripts/Custom/CMakeLists.txt           |   1 +
 .../scripts/Custom/chat_filter_playerscript.cpp    |  84 ++++++++
 11 files changed, 460 insertions(+), 6 deletions(-)
 create mode 100644 sql/custom/world/chat_filter.sql
 create mode 100644 src/server/scripts/Custom/chat_filter_playerscript.cpp

diff --git a/sql/custom/world/chat_filter.sql b/sql/custom/world/chat_filter.sql
new file mode 100644
index 0000000..e131142
--- /dev/null
+++ b/sql/custom/world/chat_filter.sql
@@ -0,0 +1,71 @@
+DROP TABLE IF EXISTS `chat_filter`;
+CREATE TABLE `chat_filter`
+(
+    `id` int(2) NOT NULL,
+    `word` CHAR(64) NOT NULL,
+    `punishment` int(10) UNSIGNED NOT NULL DEFAULT 0,
+    PRIMARY KEY (`id`)
+);
+
+-- These columns are used when a player logs out while being frozen or stuned.
+ALTER TABLE `characters`.`characters`
+        ADD COLUMN `FreezeTimer` int(10) UNSIGNED NOT NULL DEFAULT 0 AFTER `deleteDate`,
+        ADD COLUMN `StunTimer` int(10) UNSIGNED NOT NULL DEFAULT 0 AFTER `FreezeTimer`;
+
+DELETE FROM `chat_filter`;
+INSERT INTO `chat_filter` (`id`,`word`,`punishment`) VALUES 	(	1	,anjing,	256	
+		2	,babi,	256	
+		3	,goblok,	256	
+		4	,goblog,	256	
+		5	,kunyuk,	256	
+		6	,koplok,	256	
+		7	,bangsat,	256	
+		8	,dungu,	256	
+		9	,tolol,	256	
+		10	,anjink,	256	
+		11	,anjenk,	256	
+		12	,anjeng,	256	
+		13	,babik,	256	
+		14	,ndlogok,	256	
+		15	,ngentot,	256	
+		16	,peler,	256	
+		17	,pelir,	256	
+		18	,pler,	256	
+		19	,plir,	256	
+		20	,kuontol,	256	
+		21	,kwontol,	256	
+		22	,kontol,	256	
+		23	,kontil,	256	
+		24	,jembut,	256	
+		25	,gamblis,	256	
+		26	,asu,	256	
+		27	,bajing,	256	
+		28	,bajingan,	256	
+		29	,lonte,	256	
+		30	,perek,	256	
+		31	,penis,	256	
+		32	,memek,	256	
+		33	,meki,	256	
+		34	,jancok,	256	
+		35	,cuki,	256	
+		36	,cukimai,	256	
+		37	,cukimay,	256	
+		38	,puki,	256	
+		39	,pukimai,	256	
+		40	,pukimay,	256	
+		41	,pukimak,	256	
+		42	,pentil,	256	
+		43	,toket,	256	
+		44	,toked,	256	
+		45	,tempek,	256	
+		46	,tempik,	256	
+		47	,bawok,	256	
+		48	,bawuk,	256	
+		49	,itil,	256	)
+
+
+
+-- Self Stun removes the stun visual when it expires
+DELETE FROM `spell_linked_spell` WHERE `spell_effect`=-18970;
+INSERT INTO `spell_linked_spell` (`spell_trigger`,`spell_effect`,`type`,`comment`) VALUES
+(-65256,-18970,0,"Self Stun removal removes Self Stun - (Visual Only)");
\ No newline at end of file
diff --git a/src/server/game/Entities/Player/Player.cpp b/src/server/game/Entities/Player/Player.cpp
index de89976..3871e98 100755
--- a/src/server/game/Entities/Player/Player.cpp
+++ b/src/server/game/Entities/Player/Player.cpp
@@ -1684,6 +1684,29 @@ void Player::Update(uint32 p_time)
         }
     }
 
+	    if (freezeTimer > 0)
+    {
+        if (p_time >= freezeTimer)
+        {
+            if (HasAura(9454))
+                RemoveAurasDueToSpell(9454);
+        }
+        else
+            freezeTimer -= p_time;
+    }
+
+    if (stunTimer > 0)
+    {
+        if (p_time >= stunTimer)
+        {
+            if (HasAura(31539))
+                RemoveAurasDueToSpell(31539);
+        }
+        else
+            stunTimer -= p_time;
+    }
+
+
     if (m_weaponChangeTimer > 0)
     {
         if (p_time >= m_weaponChangeTimer)
diff --git a/src/server/game/Entities/Player/Player.h b/src/server/game/Entities/Player/Player.h
index c62cf0e..b143610 100755
--- a/src/server/game/Entities/Player/Player.h
+++ b/src/server/game/Entities/Player/Player.h
@@ -2308,6 +2308,15 @@ class Player : public Unit, public GridObject<Player>
         bool CanSpeak() const;
         void ChangeSpeakTime(int utime);
 
+		 /*********************************************************/
+        /***                 CHAT FILTER SYSTEM                ***/
+       /*********************************************************/
+
+        void SetLoggedOutWhilePunished(bool _true) { loggedOutWhilePunished = _true; }
+        bool LoggedOutWhilePunished() { return loggedOutWhilePunished; }
+        void SetFreezeStunTimer(bool freeze, uint32 _timer) { freeze ? freezeTimer = _timer : stunTimer = _timer; }
+        uint32 GetFreezeStunTimer(bool freeze) { return freeze ? freezeTimer : stunTimer; }
+
         /*********************************************************/
         /***                 VARIOUS SYSTEMS                   ***/
         /*********************************************************/
@@ -2775,6 +2784,10 @@ class Player : public Unit, public GridObject<Player>
         uint32 m_zoneUpdateTimer;
         uint32 m_areaUpdateId;
 
+		uint32 freezeTimer;
+        uint32 stunTimer;
+        bool loggedOutWhilePunished;
+
         uint32 m_deathTimer;
         time_t m_deathExpireTime;
 
diff --git a/src/server/game/Globals/ObjectMgr.cpp b/src/server/game/Globals/ObjectMgr.cpp
index 7d94e0a..2b3db03 100755
--- a/src/server/game/Globals/ObjectMgr.cpp
+++ b/src/server/game/Globals/ObjectMgr.cpp
@@ -6960,6 +6960,32 @@ void ObjectMgr::LoadQuestPOI()
     sLog->outInfo(LOG_FILTER_SERVER_LOADING, ">> Loaded %u quest POI definitions in %u ms", count, GetMSTimeDiffToNow(oldMSTime));
 }
 
+void ObjectMgr::LoadChatFilter()
+{
+    uint32 oldMSTime = getMSTime();
+
+    _chatFilterStore.clear();
+
+    QueryResult result = CharacterDatabase.Query("SELECT word, punishment FROM chat_filter");
+
+    if (!result)
+    {
+        sLog->outInfo(LOG_FILTER_CHATSYS, ">> Loaded 0 ChatFilter words. DB table `chat_filter` is empty.");
+        return;
+    }
+
+    uint32 count = 0;
+
+    do
+    {
+        _chatFilterStore.push_back(std::make_pair((*result)[0].GetString(), (*result)[1].GetUInt32()));
+        count++;
+    }
+    while (result->NextRow());
+
+    sLog->outInfo(LOG_FILTER_CHATSYS, ">> Loaded %u chat filter words in %u ms", count, GetMSTimeDiffToNow(oldMSTime));
+}
+
 void ObjectMgr::LoadNPCSpellClickSpells()
 {
     uint32 oldMSTime = getMSTime();
diff --git a/src/server/game/Globals/ObjectMgr.h b/src/server/game/Globals/ObjectMgr.h
index 7e8e4d2..088d54e 100755
--- a/src/server/game/Globals/ObjectMgr.h
+++ b/src/server/game/Globals/ObjectMgr.h
@@ -608,6 +608,8 @@ class ObjectMgr
 
         typedef std::vector<std::string> ScriptNameContainer;
 
+		typedef std::vector<std::pair<std::string, uint32> > ChatFilterContainer;
+
         typedef std::map<uint32, uint32> CharacterConversionMap;
 
         Player* GetPlayerByLowGUID(uint32 lowguid) const;
@@ -906,6 +908,9 @@ class ObjectMgr
 
         void LoadNPCSpellClickSpells();
 
+		void LoadChatFilter();
+        ChatFilterContainer& GetCensoredWords() { return _chatFilterStore; }
+
         void LoadGameTele();
 
         void LoadGossipMenu();
@@ -1210,6 +1215,8 @@ class ObjectMgr
 
         SpellClickInfoContainer _spellClickInfoStore;
 
+		ChatFilterContainer _chatFilterStore;
+
         SpellScriptsContainer _spellScriptsStore;
 
         VehicleAccessoryContainer _vehicleTemplateAccessoryStore;
diff --git a/src/server/game/Handlers/ChatHandler.cpp b/src/server/game/Handlers/ChatHandler.cpp
index 1e683a8..dfa9f35 100755
--- a/src/server/game/Handlers/ChatHandler.cpp
+++ b/src/server/game/Handlers/ChatHandler.cpp
@@ -63,6 +63,97 @@ bool WorldSession::processChatmessageFurtherAfterSecurityChecks(std::string& msg
     return true;
 }
 
+enum ChatFilterPunishments
+{
+    CHAT_FILTER_PUNISHMENT_MUTE_10_SEC          = 1,
+    CHAT_FILTER_PUNISHMENT_MUTE_30_SEC          = 2,
+    CHAT_FILTER_PUNISHMENT_MUTE_1_MIN           = 4,
+    CHAT_FILTER_PUNISHMENT_MUTE_2_MIN           = 8,
+    CHAT_FILTER_PUNISHMENT_MUTE_5_MIN           = 16,
+    CHAT_FILTER_PUNISHMENT_MUTE_10_MIN          = 32,
+    CHAT_FILTER_PUNISHMENT_MUTE_20_MIN          = 64,
+    CHAT_FILTER_PUNISHMENT_MUTE_30_MIN          = 128,
+    CHAT_FILTER_PUNISHMENT_MUTE_1_HOUR          = 256,
+    CHAT_FILTER_PUNISHMENT_FREEZE_5_MIN         = 512,
+    CHAT_FILTER_PUNISHMENT_FREEZE_10_MIN        = 1024,
+    CHAT_FILTER_PUNISHMENT_KICK_PLAYER          = 2048,
+    CHAT_FILTER_PUNISHMENT_BAN_PLAYER_1_DAYS    = 4096,
+    CHAT_FILTER_PUNISHMENT_BAN_PLAYER_2_DAYS    = 8192,
+    CHAT_FILTER_PUNISHMENT_BAN_PLAYER_5_DAYS    = 16384,
+    CHAT_FILTER_PUNISHMENT_BAN_PLAYER_7_DAYS    = 32768,
+    CHAT_FILTER_PUNISHMENT_STUN_5_MIN           = 65536,
+    CHAT_FILTER_PUNISHMENT_STUN_10_MIN          = 131072,
+
+    SPELL_FREEZE                                = 9454,
+    SPELL_STUN                                  = 31539,
+    SPELL_STUN_SELF_ONE_SEC                     = 65256,
+    SPELL_STUN_SELF_VISUAL                      = 18970,
+
+    MAX_ALLOWED_STORED_MESSAGES_IN_CHANNELS     = 10,
+};
+
+std::vector<std::pair<uint64 /*guid*/, std::string /*message*/> > messagesInChannel;
+
+class kick_player_delay_event : public BasicEvent
+{
+    public:
+        kick_player_delay_event(Player* player) : _player(player) { }
+
+        bool Execute(uint64 /*time*/, uint32 /*diff*/)
+        {
+            if (_player && _player->GetSession())
+                _player->GetSession()->KickPlayer();
+            return true;
+        }
+
+    private:
+        Player* _player;
+};
+
+void PunishPlayerForBadWord(Player* _sender, uint32 _muteTime = 0, uint32 _freezeTime = 0, uint16 _banTimeDays = 0, uint32 _stunTime = 0, bool _kickPlayer = false)
+{
+    if (!_sender)
+        return;
+
+    if (_muteTime != 0)
+    {
+        _sender->CastSpell(_sender, SPELL_STUN_SELF_VISUAL, false);
+        _sender->CastSpell(_sender, SPELL_STUN_SELF_ONE_SEC, false);
+        _sender->GetSession()->m_muteTime = time(NULL) + (_muteTime / 1000);
+        _sender->GetSession()->SendNotification("Your chat has been disabled for %u minutes and %u seconds because you've used bad words.", (_muteTime / 60000), ((_muteTime % 60000) / 1000));
+    }
+
+    if (_freezeTime != 0)
+    {
+        _sender->CastSpell(_sender, SPELL_FREEZE, false);
+        _sender->GetSession()->SendNotification("You have been frozen for %u minutes and %u seconds for using bad words.", (_freezeTime / 60000), ((_freezeTime % 60000) / 1000));
+        _sender->SetFreezeStunTimer(true, _freezeTime);
+    }
+
+    if (_kickPlayer)
+    {
+        _sender->GetSession()->SendNotification("You will be kicked in 3 seconds for using bad words.");
+        _sender->m_Events.AddEvent(new kick_player_delay_event(_sender), _sender->m_Events.CalculateTime(3000));
+    }
+
+    if (_banTimeDays != 0)
+    {
+        std::stringstream _duration, _banReason;
+        uint64 _banTimeSecs = _banTimeDays * DAY;
+        _duration << _banTimeSecs << "s";
+        _banReason << "Chat Filter System ban. Duration: " << _banTimeDays << (_banTimeDays == 1 ? " day." : " days.");
+        sWorld->BanCharacter(_sender->GetName(), _duration.str(), _banReason.str(), "Chat Filter System");
+    }
+
+    if (_stunTime != 0)
+    {
+        _sender->CastSpell(_sender, SPELL_STUN, false);
+        _sender->GetSession()->SendNotification("You have been stunned for %u minutes and %u seconds for using bad words.", (_stunTime / 60000), ((_stunTime % 60000) / 1000));
+        _sender->SetFreezeStunTimer(false, _stunTime);
+    }
+}
+
+
 void WorldSession::HandleMessagechatOpcode(WorldPacket & recv_data)
 {
     uint32 type;
@@ -194,6 +285,94 @@ void WorldSession::HandleMessagechatOpcode(WorldPacket & recv_data)
         return;
     }
 
+	bool kickPlayer = false, punishPlayer = false, duplicatedMessage = false;
+	uint32 muteTime = 0, freezeTime = 0, banTimeDays = 0, stunTime = 0, punishment = 0;
+    char* message = strdup(msg.c_str());
+    char* words = strtok(message, " ,.-()&^%$#@!{}'<>/?|\\=+-_1234567890");
+    std::string convertedMsg = msg;
+    ObjectMgr::ChatFilterContainer const& censoredWords = sObjectMgr->GetCensoredWords();
+
+    while (words != NULL && !censoredWords.empty())
+    {
+        for (ObjectMgr::ChatFilterContainer::const_iterator itr = censoredWords.begin(); itr != censoredWords.end(); ++itr)
+        {
+            if (!stricmp(itr->first.c_str(), words))
+            {
+                //! Convert everything into lower case
+                for (uint16 i = 0; i < convertedMsg.size(); ++i)
+                    convertedMsg[i] = tolower(convertedMsg[i]);
+
+                size_t bannedWord = convertedMsg.find(itr->first);
+
+                while (bannedWord != std::string::npos)
+                {
+                    convertedMsg.replace(bannedWord, itr->first.length(), itr->first.length(), '*');
+                    bannedWord = convertedMsg.find(itr->first, bannedWord + 1);
+                    punishment = itr->second;
+                    punishPlayer = true;
+
+                    if (punishment & CHAT_FILTER_PUNISHMENT_MUTE_10_SEC)
+                        muteTime += 10000;
+
+                    if (punishment & CHAT_FILTER_PUNISHMENT_MUTE_30_SEC)
+                        muteTime += 30000;
+
+                    if (punishment & CHAT_FILTER_PUNISHMENT_MUTE_1_MIN)
+                        muteTime += 60000;
+
+                    if (punishment & CHAT_FILTER_PUNISHMENT_MUTE_2_MIN)
+                        muteTime += 120000;
+
+                    if (punishment & CHAT_FILTER_PUNISHMENT_MUTE_5_MIN)
+                        muteTime += 300000;
+
+                    if (punishment & CHAT_FILTER_PUNISHMENT_MUTE_10_MIN)
+                        muteTime += 600000;
+
+                    if (punishment & CHAT_FILTER_PUNISHMENT_MUTE_20_MIN)
+                        muteTime += 1200000;
+
+                    if (punishment & CHAT_FILTER_PUNISHMENT_MUTE_30_MIN)
+                        muteTime += 1800000;
+
+                    if (punishment & CHAT_FILTER_PUNISHMENT_MUTE_1_HOUR)
+                        muteTime += 3600000;
+
+                    if (punishment & CHAT_FILTER_PUNISHMENT_FREEZE_5_MIN)
+                        freezeTime += 300000;
+
+                    if (punishment & CHAT_FILTER_PUNISHMENT_FREEZE_10_MIN)
+                        freezeTime += 600000;
+
+                    if (punishment & CHAT_FILTER_PUNISHMENT_STUN_5_MIN)
+                        stunTime += 300000;
+
+                    if (punishment & CHAT_FILTER_PUNISHMENT_STUN_10_MIN)
+                        stunTime += 600000;
+
+                    if (punishment & CHAT_FILTER_PUNISHMENT_KICK_PLAYER)
+                        kickPlayer = true;
+
+                    if (punishment & CHAT_FILTER_PUNISHMENT_BAN_PLAYER_1_DAYS)
+                        banTimeDays += 1;
+
+                    if (punishment & CHAT_FILTER_PUNISHMENT_BAN_PLAYER_2_DAYS)
+                        banTimeDays += 2;
+
+                    if (punishment & CHAT_FILTER_PUNISHMENT_BAN_PLAYER_5_DAYS)
+                        banTimeDays += 5;
+
+                    if (punishment & CHAT_FILTER_PUNISHMENT_BAN_PLAYER_7_DAYS)
+                        banTimeDays += 7;
+                }
+            }
+        }
+
+        words = strtok(NULL, " ,.-()&^%$#@!{}'<>/?|\\=+-_1234567890");
+    }
+
+    msg = convertedMsg;
+
     std::string to, channel, msg;
     bool ignoreChecks = false;
     switch (type)
@@ -434,15 +613,37 @@ void WorldSession::HandleMessagechatOpcode(WorldPacket & recv_data)
 
             if (ChannelMgr* cMgr = channelMgr(_player->GetTeam()))
             {
-
                 if (Channel* chn = cMgr->GetChannel(channel, _player))
                 {
-                    sScriptMgr->OnPlayerChat(_player, type, lang, msg, chn);
-
-                    chn->Say(_player->GetGUID(), msg.c_str(), lang);
+                    for (std::vector<std::pair<uint64, std::string> >::const_iterator itr = messagesInChannel.begin(); itr != messagesInChannel.end(); ++itr)
+                    {
+                        if (itr->first == sender->GetGUID() && itr->second == msg)
+                        {
+                            sender->GetSession()->SendNotification("Your message won't be displayed because it's not allowed to flood the channels like that.");
+                            duplicatedMessage = true;
+                            break; //! Stop looping through elements if we found a 'target' in the vector.
+                        }
+                    }
+
+                    if (!duplicatedMessage)
+                    {
+                        sScriptMgr->OnPlayerChat(_player, type, lang, msg, chn);
+                        chn->Say(_player->GetGUID(), msg.c_str(), lang);
+                        messagesInChannel.push_back(std::make_pair(sender->GetGUID(), msg));
+
+                        //! It's pointless to check for this if the message is never sent to the
+                        //! actual channel (so out of the brackets from this if-check), because
+                        //! in that case the vector's size wouldn't change anyway.
+                        //! Here we nuke out the 'oldest' element from vector messagesInChannel
+                        //! if the size of it equals to or is bigger than the max. allowed messages
+                        //! to check against.
+                        if (messagesInChannel.size() >= MAX_ALLOWED_STORED_MESSAGES_IN_CHANNELS)
+                            messagesInChannel.erase(messagesInChannel.begin());
+                    }
                 }
             }
-        } break;
+        } 
+		break;
         case CHAT_MSG_AFK:
         {
             if ((msg.empty() || !_player->isAFK()) && !_player->isInCombat())
@@ -483,6 +684,13 @@ void WorldSession::HandleMessagechatOpcode(WorldPacket & recv_data)
             sLog->outError(LOG_FILTER_NETWORKIO, "CHAT: unknown message type %u, lang: %u", type, lang);
             break;
     }
+
+	//! No need to reset variable punishment because they automatically do that every chatmessage
+    if (punishPlayer && !duplicatedMessage)
+        PunishPlayerForBadWord(sender, muteTime, freezeTime, banTimeDays, stunTime, kickPlayer);
+
+    free(message); //! Prevents memoryleaks
+
 }
 
 void WorldSession::HandleEmoteOpcode(WorldPacket & recv_data)
diff --git a/src/server/game/Scripting/ScriptLoader.cpp b/src/server/game/Scripting/ScriptLoader.cpp
index 2d678f3..82f7b7c 100755
--- a/src/server/game/Scripting/ScriptLoader.cpp
+++ b/src/server/game/Scripting/ScriptLoader.cpp
@@ -616,6 +616,9 @@ void AddSC_outdoorpvp_zm();
 // player
 void AddSC_chat_log();
 
+// Chat Filter
+void AddSC_chat_filter_playerscript();
+
 #endif
 
 void AddScripts()
@@ -717,6 +720,7 @@ void AddWorldScripts()
     AddSC_npc_taxi();
     AddSC_achievement_scripts();
     AddSC_chat_log();
+	AddSC_chat_filter_playerscript();
 #endif
 }
 
diff --git a/src/server/game/World/World.cpp b/src/server/game/World/World.cpp
index e862173..63754fb 100755
--- a/src/server/game/World/World.cpp
+++ b/src/server/game/World/World.cpp
@@ -964,7 +964,7 @@ void World::LoadConfigSettings(bool reload)
 
     m_int_configs[CONFIG_CHATFLOOD_MESSAGE_COUNT] = ConfigMgr::GetIntDefault("ChatFlood.MessageCount", 10);
     m_int_configs[CONFIG_CHATFLOOD_MESSAGE_DELAY] = ConfigMgr::GetIntDefault("ChatFlood.MessageDelay", 1);
-    m_int_configs[CONFIG_CHATFLOOD_MUTE_TIME]     = ConfigMgr::GetIntDefault("ChatFlood.MuteTime", 10);
+    m_int_configs[CONFIG_CHATFLOOD_MUTE_TIME]     = ConfigMgr::GetIntDefault("ChatFlood.MuteTime", 3600);
 
     m_int_configs[CONFIG_EVENT_ANNOUNCE] = ConfigMgr::GetIntDefault("Event.Announce", 0);
 
@@ -1474,6 +1474,9 @@ void World::SetInitialWorldSettings()
     sLog->outInfo(LOG_FILTER_SERVER_LOADING, "Loading UNIT_NPC_FLAG_SPELLCLICK Data..."); // must be after LoadQuests
     sObjectMgr->LoadNPCSpellClickSpells();
 
+	sLog->outString("Loading Chat Filter Words...");
+    sObjectMgr->LoadChatFilter();
+
     sLog->outInfo(LOG_FILTER_SERVER_LOADING, "Loading Vehicle Template Accessories...");
     sObjectMgr->LoadVehicleTemplateAccessories();                // must be after LoadCreatureTemplates() and LoadNPCSpellClickSpells()
 
diff --git a/src/server/scripts/Commands/cs_reload.cpp b/src/server/scripts/Commands/cs_reload.cpp
index 7d2a430..f7b1330 100644
--- a/src/server/scripts/Commands/cs_reload.cpp
+++ b/src/server/scripts/Commands/cs_reload.cpp
@@ -158,6 +158,7 @@ public:
             { "waypoint_data",                SEC_ADMINISTRATOR, true,  &HandleReloadWpCommand,                         "", NULL },
             { "vehicle_accessory",            SEC_ADMINISTRATOR, true,  &HandleReloadVehicleAccessoryCommand,           "", NULL },
             { "vehicle_template_accessory",   SEC_ADMINISTRATOR, true,  &HandleReloadVehicleTemplateAccessoryCommand,   "", NULL },
+			{ "chat_filter",                  SEC_ADMINISTRATOR, true,  &HandleReloadLoadChatFilterCommand,             "", NULL },
             { NULL,                           0,                 false, NULL,                                           "", NULL }
         };
         static ChatCommand commandTable[] =
@@ -200,7 +201,11 @@ public:
         HandleReloadVehicleAccessoryCommand(handler, "");
         HandleReloadVehicleTemplateAccessoryCommand(handler, "");
 
+		HandleReloadLoadChatFilterCommand(handler, "");
+
         HandleReloadAutobroadcastCommand(handler, "");
+
+		HandleReloadLoadChatFilterCommand(handler, "");
         return true;
     }
 
@@ -1306,6 +1311,15 @@ public:
         handler->SendGlobalGMSysMessage("Vehicle template accessories reloaded.");
         return true;
     }
+
+	static bool HandleReloadLoadChatFilterCommand(ChatHandler* handler, char const* /*args*/)
+    {
+        sLog->outInfo(LOG_FILTER_CHATSYS, "Reloading chat_filter table...");
+        sObjectMgr->LoadChatFilter();
+        handler->SendGlobalGMSysMessage("Chat Filter words reloaded.");
+        return true;
+    }
+
 };
 
 void AddSC_reload_commandscript()
diff --git a/src/server/scripts/Custom/CMakeLists.txt b/src/server/scripts/Custom/CMakeLists.txt
index ea5c87c..8f949f4 100644
--- a/src/server/scripts/Custom/CMakeLists.txt
+++ b/src/server/scripts/Custom/CMakeLists.txt
@@ -11,6 +11,7 @@
 set(scripts_STAT_SRCS
   ${scripts_STAT_SRCS}
   Custom/mod_ArenaWatcher.cpp
+  Custom/chat_filter_playerscript.cpp
 )
 
 message("  -> Prepared: Custom")
diff --git a/src/server/scripts/Custom/chat_filter_playerscript.cpp b/src/server/scripts/Custom/chat_filter_playerscript.cpp
new file mode 100644
index 0000000..0f965da
--- /dev/null
+++ b/src/server/scripts/Custom/chat_filter_playerscript.cpp
@@ -0,0 +1,84 @@
+/*
+ * Copyright (C) 2008-2012 TrinityCore <http://www.trinitycore.org/>
+ *
+ * This program is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License as published by the
+ * Free Software Foundation; either version 2 of the License, or (at your
+ * option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
+ * more details.
+ *
+ * You should have received a copy of the GNU General Public License along
+ * with this program. If not, see <http://www.gnu.org/licenses/>.
+ */
+
+#include "ScriptPCH.h"
+#include "DatabaseEnv.h"
+
+enum ChatFilterAuras
+{
+    SPELL_AURA_FREEZE   = 9454,
+    SPELL_AURA_STUN     = 31539,
+};
+
+class chat_filter_playerscript : public PlayerScript
+{
+    public:
+        chat_filter_playerscript() : PlayerScript("chat_filter_playerscript") { }
+
+        void OnLogin(Player* player)
+        {
+            if (player->HasAura(SPELL_AURA_FREEZE))
+            {
+                if (player->LoggedOutWhilePunished())
+                    player->GetSession()->SendNotification("Your freeze timer was set to the number before you logged out during your freeze.");
+
+                if (QueryResult result = CharacterDatabase.PQuery("SELECT FreezeTimer FROM characters WHERE guid = %u", player->GetGUIDLow()))
+                {
+                    player->SetFreezeStunTimer(true, (*result)[0].GetUInt32());
+                    CharacterDatabase.PExecute("UPDATE characters SET FreezeTimer = 0 WHERE guid = %u", player->GetGUIDLow());
+                }
+            }
+
+            if (player->HasAura(SPELL_AURA_STUN))
+            {
+                if (player->LoggedOutWhilePunished())
+                    player->GetSession()->SendNotification("Your stun timer was set to the number before you logged out during your stun.");
+
+                if (QueryResult result = CharacterDatabase.PQuery("SELECT StunTimer FROM characters WHERE guid = %u", player->GetGUIDLow()))
+                {
+                    player->SetFreezeStunTimer(false, (*result)[0].GetUInt32());
+                    CharacterDatabase.PExecute("UPDATE characters SET StunTimer = 0 WHERE guid = %u", player->GetGUIDLow());
+                }
+            }
+
+            player->SetLoggedOutWhilePunished(false);
+        }
+
+        void OnLogout(Player* player)
+        {
+            //! If player is frozen or stunned by the chat filter system because
+            //! they used 'bad words' and logout during their punishment, the
+            //! remaining time they should be frozen or stunned will be saved
+            //! into a database column and pulled back in on logout.
+            if (player->HasAura(SPELL_AURA_FREEZE))
+            {
+                player->SetLoggedOutWhilePunished(true);
+                CharacterDatabase.PExecute("UPDATE characters SET FreezeTimer = %u WHERE guid = %u", player->GetFreezeStunTimer(true), player->GetGUIDLow());
+            }
+
+            if (player->HasAura(SPELL_AURA_STUN))
+            {
+                player->SetLoggedOutWhilePunished(true);
+                CharacterDatabase.PExecute("UPDATE characters SET StunTimer = %u WHERE guid = %u", player->GetFreezeStunTimer(false), player->GetGUIDLow());
+            }
+        }
+};
+
+void AddSC_chat_filter_playerscript()
+{
+    new chat_filter_playerscript();
+}
\ No newline at end of file
-- 
1.8.0.msysgit.0

